# Problem Set 2

## Problem 1

Write a function to compute the probability of having a maximum as big as `m` when looking across `n` Poisson variables with rate `lambda`. Give these arguments default values in your function declaration.

::: {.callout-tip icon="false" collapse="true"}
## Solution

```{r}
maxPois <- function(m = 8, n = 100, lambda = 0.5){
  1 - ppois(m-1, lambda)^n
}
maxPois()
```
:::

## Problem 2

Let's answer a question about C. *elegans* genome nucleotide frequency: Is the mitochondrial sequence of C. *elegans* consistent with a model of equally likely nucleotides?

Setup: This is our opportunity to use Bioconductor for the first time. Since Bioconductor's package management is more tightly controlled than CRAN's, we need to use a special install function (from the BiocManager package) to install Bioconductor packages.

```{r}
#| output: FALSE
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(c("Biostrings", "BSgenome.Celegans.UCSC.ce2"))
```

After that, we can load the genome sequence package as we load any other R packages.

```{r}
library("BSgenome.Celegans.UCSC.ce2",quietly = TRUE )
Celegans
seqnames(Celegans)
Celegans$chrM
class(Celegans$chrM)
```

We can take advantage of the `Biostrings` library to get base counts:

```{r}
library("Biostrings", quietly = TRUE)
lfM = letterFrequency(Celegans$chrM, letters=c("A", "C", "G", "T"))
lfM
```

Test whether the C. elegans data is consistent with the uniform model (all nucleotide frequencies the same) using a simulation. For the purposes of this simulation, we can assume that all base pairs are independent from each other. Your solution should compute a simulated p-value based on $10,000$ simulations.

*Hint:* The multinomial distribution is similar to the binomial distribution but can model experiments with more than $2$ outcomes. For instance suppose we have 8 characters of four different, equally likely types:

```{r}
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
```

::: {.callout-tip icon="false" collapse="true"}
## Solution

We know that, for equal frequencies, we would expect each nucleotide to have an equal count.

There are a few ways we could imagine explaining how different a set of counts is from a multinomial output. One way is to define a single test statistic which is the sum of the square difference in expected counts and real counts, scaled by the number of expected counts. This function calculates this sum based on the observed (`o`) and expected (`e`) counts.

```{r}
bases_stat = function(o, e) {
  sum((o-e)^2 / e)
}
obs = bases_stat(o = lfM, e = length(Celegans$chrM) / 4)
obs
```

This is essentially the average percent difference in our counts from the expected counts, squared so that we do not need to worry about positive versus negative differences.

```{r}
B = 10000
n = length(Celegans$chrM)
expected = rep(n / 4, 4)
oenull = replicate(B, bases_stat(e = expected, o = rmultinom(1, n, p = rep(1/4, 4))))
observed <- bases_stat(lfM, expected)
max(oenull)
sim_p <- sum(oenull > observed)/B
sim_p
```
:::

## Problem 3

Instead of testing across the entire mitochondria, let's now see if we can find certain nucleotides being enriched locally. To do this, split up the mitochondrial sequence into 100 base pair chunks, and perform your test from problem $3$ on each chunk. Perform a multiple hypothesis correction at an FDR of $0.01$.

::: {.callout-tip icon="false" collapse="true"}
## Solution

First we need to split the chromosome into 100bp chunks. We can use the `substring` and `seq` functions to do this.

```{r}
chunks <- substring(as.character(Celegans$chrM), seq(1, n, 100), seq(100, n, 100))

#We get an empty string as the last chunk, remove it
chunks <- chunks[-length(chunks)]
```

Now we define a function with the test we performed above.

```{r}
uniform_test <- function(seq_int){
  B <- 10000
  seq_int <- DNAString(seq_int)
  n <- length(seq_int)
  #We need to remake the chunk into a biostrings DNAString object
  lfM <- letterFrequency(seq_int, letters=c("A", "C", "G", "T"))
  expected <- rep(n / 4, 4)
  oenull <- replicate(B, bases_stat(e = expected, o = rmultinom(1, n, p = rep(1/4, 4))))
  observed <- bases_stat(lfM, expected)
  sim_p <- sum(oenull > observed)/B
  return(sim_p)
}
```

Finally we apply the test to all the chunks and correct the simulation-derived p values.

```{r}
result <- sapply(chunks, uniform_test)
result <- p.adjust(result, method = "fdr")
head(sort(result, decreasing = TRUE))
```
:::

------------------------------------------------------------------------

*The materials in this lesson have been adapted from:* [*Modern Statistics for Modern Biology*](https://www.huber.embl.de/msmb/) *by Susan Holmes and Wolfgang Huber. This work is distributed under the terms of the [Attribution-NonCommercial-ShareAlike 2.0 Generic](https://creativecommons.org/licenses/by-nc-sa/2.0/) (CC BY-NC-SA 2.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited, the material is used for noncommercial purposes, and the same license is used for any derivative material.*
