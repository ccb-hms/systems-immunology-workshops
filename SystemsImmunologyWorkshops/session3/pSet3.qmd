# Problem Set 3

## Instructions

In this problem set, you will be going through an analysis resolve a potential label swap in phosphoproteomic mass spec data.

It is recommended to create a Quarto notebook for your report. You can create a new notebook in RSTudio by going to `file->new file->quarto document`. Set the default output to be a PDF. As an example, the entire workbook is a quarto document. More information can be [found here](https://quarto.org/docs/get-started/hello/rstudio.html). However, if you are finding it difficult to render your document, feel free to instead submit a script and separate writeup document.

## Data Description

We are collaborating with a lab that is studying phosphorylation changes during covid infection. This dataset consists of phosphoproteomic TMT mass spec data from 2 10-plexes. We took samples at 0, 5, and 60 minutes post-infection. We also wanted to explore the specific role of 2 genes thought to be used in covid infection, RAB7A and NPC1. To do this, we included cell lines with each of these genes knocked out.

We wanted to have 2 replicates for each condition we were looking at, so we have a total of 3X2X3 or 18 different samples we want to measure. We decide to replicate wild type at 0 minutes in each 10plex for our total 20 wells accross the 2 10-plexes.

*Our collaborator has alerted us that there may have been a label swap in the dataset. We need to see if we can find two samples which seem to have been swapped, and correct the error if we feel confident that we know what swap took place.*

**Note:** This data has been adapted with permission from an unpublished study. The biological context of the original data has been changed, and all gene names were shuffled.

## Loading Data

Load in the data `phospho_exp2_safe.csv` and `phospho_exp2_safe.csv`.

There are two variables of interest, the time, 0, 5, or 60 minutes post-infection, and the genotype, WT, NPC1 knockout and RAB7A knockout.

Unfortunately, all of this data is embedded in the column names of the dataset.

Create a `metadata_plex#` dataframes to contain this data instead. You can try to do this programatically from the column names, or you can type out the data manually.

::: {.callout-tip icon="false" collapse="true"}
## Solution

```{r}
#First we load the data normally

plex2_data <- read.csv("../data/phospho_exp2_safe.csv")
plex3_data <- read.csv("../data/phospho_exp3_safe.csv")

#We'll use the stringr library to split up the column names
library(stringr, quietly = TRUE)

make_metadata <- function(in_names){
  split_names <- str_split_fixed(in_names, "_", 3)
  metadata <- data.frame(split_names)
  #paste0 lets us concatenate strings
  rownames(metadata) <- paste0('sample', rownames(metadata))
  colnames(metadata) <- c("condition","time","replicate")
  metadata$condition <- factor(metadata$condition)
  metadata$time <- factor(metadata$time, levels = c("0Min","5Min","60Min"))
  return(metadata)
}

metadata_plex2 <- make_metadata(colnames(plex2_data[,6:15]))
metadata_plex3 <- make_metadata(colnames(plex3_data[,6:15]))

colnames(plex2_data)[6:15] <- rownames(metadata_plex2)
colnames(plex3_data)[6:15] <- rownames(metadata_plex3)
```
:::

## PCA

As an initial quality check, let's run PCA on our data. We can use `prcomp` to run pca, and `autoplot` to plot the result. Let's try making 2 pca plots, 1 for each 10plex. We can set the color equal to the genotype and the shape of the points equal to the time.

You can call `prcomp` and `autoplot` like this:

    library(ggfortify)
    #PCA Plots
    pca_res2 <- prcomp(plex2_data, scale = FALSE)
    autoplot(pca_res2, data=metadata_plex2, colour = 'condition', shape='time', size=3)

*Hint: `prcomp` might be expecting data in a wide format as opposed to a long format, meaning that we need to make each peptide a column and each row a sample. We can use the t() function and convert the result to a dataframe to get our data into this format.*

*Note: You may need to set the `scale` parameter to `FALSE` to avoid an error in `prcomp`.*

We should look at how our replicates are clustered. Does everything look good in both 10-plexes?

::: {.callout-tip icon="false" collapse="true"}
## Solution

We need to transpose the numeric parts of the data in order to run PCA on it. 

```{r}
library(ggfortify)
pca_res2 <- prcomp(t(plex2_data[,6:15]), scale = FALSE)
autoplot(pca_res2, data=metadata_plex2, colour = 'condition', shape='time', size=3)

pca_res3 <- prcomp(t(plex3_data[,6:15]), scale = FALSE)
autoplot(pca_res3, data=metadata_plex3, colour = 'condition', shape='time', size=3)
```

At first glance, both plots look messy. However, when interpreting a PCA plot is important to note how much variance is explained by each principle component. On both of these, the 1st PC explains over 80% of the variance, while the second less than 10%. Thus, we care much more (as in 8 times more) about the X axis than the Y axis. 

In both plots, we see much stronger time point clustering than condition clustering, given how muchn more important the horizontal axis is. However, in plex3 there is one 60 minute point with the 0 minute points, and vice versa. 
:::

## Heatmaps

Let's explore this more by looking at some heatmaps of our data. We can use the `heatmap` function to plot a heatmap of the correlation between each of the samples in each 10plex.

Below is how to calculate the correlation and call the `heatmap` function. You can try to use the `RowSideColors` argument or change the column names to improve the visualization.

    heatmap(x=cor(plex2_data))

*Hint: `heatmap` only accepts numeric columns.*

Is there anything unexpected in how the samples have clustered here?

::: {.callout-tip icon="false" collapse="true"}
## Solution

```{r}
heatmap(x=cor(plex2_data[,6:15]))
heatmap(x=cor(plex3_data[,6:15]))
```

At first glance our heatmaps look alright, but that is because they have been clustered automatically by the heatmap function. We can tell heatmap not to cluster to see things better or use the `RowSideColors` argument.

Not clustering:
```{r}
heatmap(x=cor(plex2_data[,6:15]), Rowv=NA, Colv=NA)
heatmap(x=cor(plex3_data[,6:15]), Rowv=NA, Colv=NA)
```

Using `RowSideColors`:
```{r}
library(RColorBrewer)
colSide2 <- brewer.pal(3, "Set1")[metadata_plex2$time]
heatmap(x=cor(plex2_data[,6:15]), RowSideColors = colSide2)
colSide3 <- brewer.pal(3, "Set1")[metadata_plex3$time]
heatmap(x=cor(plex3_data[,6:15]), RowSideColors = colSide3)
```
In both versions we clearly see a single sample in plex 3 looking to be out of place. 

:::
## Resolving the issue

Decide what to do about the potential label swap and explain your reasoning. You could declare there to be too much uncertainty and report to your collaborator that they will have to redo the experiment, decide there is no label swap, or correct a label swap and continue the analysis.

Do you feel confident enough to continue the analysis, or is there too much uncertainty to use this data? What other factors might influence your decision?

If there is additional analysis you want to perform or calculations you want to make to support your answer, feel free to do so. If you are unsure how to perform that analysis or it would be outside the scope of a problem set, instead describe what you would do and how you would use the results.

::: {.callout-tip icon="false" collapse="true"}
## Solution

There are a number of 'correct' answers here.
It makes sense to redo the experiment, gain more biological context/knowledge, try to construct a statistical test, or other directions. 

In reality, we ultimately determined that there was a label swap between samples 3 and 5 in 10plex 3. This was based on the irregular time series clustering, and that it appeared that time series clustering was significantly stronger than condition clustering. For the real experiment we also had a third 10plex with a slightly different design and corresponding proteomic measurements for all 3 10plexes which we could confirm the clustering patterns with. 

**However, we also were okay correcting this swap and moving forward because this was for an exploratory analysis.** We ultimately were using this data to generate hypothesis and perform targeted experiments based on what seemed unusual. Thus, it wasn't the end of the world if a label swap slipped through, since we were not drawing any concrete conclusions from the data. If this had been a final experiment testing a specific hypothesis, we would have redone it. 

:::
