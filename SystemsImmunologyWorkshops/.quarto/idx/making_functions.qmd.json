{"title":"Functions","markdown":{"headingText":"Functions","containsRefs":false,"markdown":"\n## Functions and their arguments\n\n### What are functions?\n\nA key feature of R is functions. Functions are **\"self contained\" modules of code that accomplish a specific task**. Functions usually take in some sort of data structure (value, vector, dataframe etc.), process it, and return a result.\n\nThe general usage for a function is the name of the function followed by parentheses:\n\n```r\nfunction_name(input)\n```\n\nThe input(s) are called **arguments**, which can include:\n\n1.  the physical object (any data structure) on which the function carries out a task\n2.  specifications that alter the way the function operates (e.g. options)\n\nNot all functions take arguments, for example:\n\n```r\ngetwd()\n```\n\nHowever, most functions can take several arguments. If you don't specify a required argument when calling the function, you will either receive an error or the function will fall back on using a *default*.\n\nThe **defaults** represent standard values that the author of the function specified as being \"good enough in standard cases\". An example would be what symbol to use in a plot. However, if you want something specific, simply change the argument yourself with a value of your choice.\n\n### Basic functions\n\nWe have already used a few examples of basic functions in the previous lessons i.e `getwd()`, `c()`, and `factor()`. These functions are available as part of R's built in capabilities, and we will explore a few more of these base functions below.\n\nLet's revisit a function that we have used previously to combine data `c()` into vectors. The *arguments* it takes is a collection of numbers, characters or strings (separated by a comma). The `c()` function performs the task of combining the numbers or characters into a single vector. You can also use the function to add elements to an existing vector:\n\n```{r}\nglengths <- c(4.6, 3000, 50000)\nglengths <- c(glengths, 90) # adding at the end \nglengths <- c(30, glengths) # adding at the beginning\n```\n\nWhat happens here is that we take the original vector `glengths` (containing three elements), and we are adding another item to either end. We can do this over and over again to build a vector or a dataset.\n\nSince R is used for statistical computing, many of the base functions involve mathematical operations. One example would be the function `sqrt()`. The input/argument must be a number, and the output is the square root of that number. Let's try finding the square root of 81:\n\n```{r}\nsqrt(81)\n```\n\nNow what would happen if we **called the function** (e.g. ran the function), on a *vector of values* instead of a single value?\n\n```{r}\nsqrt(glengths)\n```\n\nIn this case the task was performed on each individual value of the vector `glengths` and the respective results were displayed.\n\nLet's try another function, this time using one that we can change some of the *options* (arguments that change the behavior of the function), for example `round`:\n\n```{r}\nround(3.14159)\n```\n\nWe can see that we get `3`. That's because the default is to round to the nearest whole number. **What if we want a different number of significant digits?** Let's first learn how to find available arguments for a function.\n\n### Seeking help on arguments for functions\n\nThe best way of finding out this information is to use the `?` followed by the name of the function. Doing this will open up the help manual in the bottom right panel of RStudio that will provide a description of the function, usage, arguments, details, and examples:\n\n```r\n?round\n```\n\nAlternatively, if you are familiar with the function but just need to remind yourself of the names of the arguments, you can use:\n\n```{r}\nargs(round)\n```\n\nEven more useful is the `example()` function. This will allow you to run the examples section from the Online Help to see exactly how it works when executing the commands. Let's try that for `round()`:\n\n```{r}\nexample(\"round\")\n```\n\nIn our example, we can change the number of digits returned by **adding an argument**. We can type `digits=2` or however many we may want:\n\n```{r}\nround(3.14159, digits=2)\n```\n\n> *NOTE:* If you provide the arguments in the exact same order as they are defined (in the help manual) you don't have to name them:\n>\n> round(3.14159, 2)\n>\n> However, it's usually not recommended practice because it involves a lot of memorization. In addition, it makes your code difficult to read for your future self and others, especially if your code includes functions that are not commonly used. (It's however OK to not include the names of the arguments for basic functions like `mean`, `min`, etc...). Another advantage of naming arguments, is that the order doesn't matter. This is useful when a function has many arguments. **Exercise**\n\n1.  Let's use base R function to calculate **mean** value of the `glengths` vector. You might need to search online to find what function can perform this task.\n2.  Create a new vector `test <- c(1, NA, 2, 3, NA, 4)`. Use the same base R function from exercise 1 (with addition of proper argument), and calculate mean value of the `test` vector. The output should be `2.5`. \\> *NOTE:* In R, missing values are represented by the symbol `NA` (not available). It's a way to make sure that users know they have missing data, and make a conscious decision on how to deal with it. There are ways to ignore `NA` during statistical calculation, or to remove `NA` from the vector. If you want more information related to missing data or `NA` you can [go to this page](https://stats.oarc.ucla.edu/r/faq/how-does-r-handle-missing-values/) (please note that there are many advanced concepts on that page that have not been covered in class).\n3.  Another commonly used base function is `sort()`. Use this function to sort the `glengths` vector in **descending** order.\n\n------------------------------------------------------------------------\n\n### User-defined Functions\n\nOne of the great strengths of R is the user's ability to add functions. Sometimes there is a small task (or series of tasks) you need done and you find yourself having to repeat it multiple times. In these types of situations, it can be helpful to create your own custom function. The **structure of a function is given below**:\n\n```r\nname_of_function <- function(argument1, argument2) {\n    statements or code that does something\n    return(something)\n}\n```\n\n-   First you give your function a name.\n-   Then you assign value to it, where the value is the function.\n\nWhen **defining the function** you will want to provide the **list of arguments required** (inputs and/or options to modify behaviour of the function), and wrapped between curly brackets place the **tasks that are being executed on/using those arguments**. The argument(s) can be any type of object (like a scalar, a matrix, a dataframe, a vector, a logical, etc), and it's not necessary to define what it is in any way.\n\nFinally, you can **\"return\" the value of the object from the function**, meaning pass the value of it into the global environment. The important idea behind functions is that objects that are created within the function are local to the environment of the function -- they don't exist outside of the function.\n\nLet's try creating a simple example function. This function will take in a numeric value as input, and return the squared value.\n\n```{r}\nsquare_it <- function(x) {\n    square <- x * x\n    return(square)\n}\n```\n\nOnce you run the code, you should see a function named `square_it` in the Environment panel (located at the top right of Rstudio interface). Now, we can use this function as any other base R functions. We type out the name of the function, and inside the parentheses we provide a numeric value `x`:\n\n```{r}\nsquare_it(5)\n```\n\nPretty simple, right? In this case, we only had one line of code that was run, but in theory you could have many lines of code to get obtain the final results that you want to \"return\" to the user.\n\n> #### Do I always have to `return()` something at the end of the function?\n>\n> In the example above, we created a new variable called `square` inside the function, and then return the value of `square`. If you don't use `return()`, by default R will return the value of the last line of code inside that function. That is to say, the following function will also work.\n>\n> ```{r}\n> square_it <- function(x) {\n>    x * x\n> }\n> ```\n>\n> However, we **recommend** always using `return` at the end of a function as the best practice.\n\nWe have only scratched the surface here when it comes to creating functions! We will revisit this in later lessons, but if interested you can also find more detailed information on this [R-bloggers site](https://www.r-bloggers.com/how-to-write-and-debug-an-r-function/), which is where we adapted this example from.\n\n------------------------------------------------------------------------\n\n*The materials in this lesson have been adapted from work created by the (HBC)\\](http://bioinformatics.sph.harvard.edu/) and Data Carpentry (http://datacarpentry.org/). These are open access materials distributed under the terms of the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/) (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.*\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"making_functions.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"making_functions.pdf"},"language":{},"metadata":{"block-headings":true,"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}