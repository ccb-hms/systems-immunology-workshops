# Differential expression analysis with DESeq2

A basic task in the analysis of RNA-seq count data is the detection of differentially expressed genes. The count data are presented as a table which reports, for each sample, the number of sequence fragments that have been assigned to each gene. An important analysis question is the quantification and statistical inference of systematic changes between conditions, as compared to within-condition variability.

We start by loading the [DESeq2](https://bioconductor.org/packages/DESeq2) package, a very popular method for analysing differential expression of bulk RNA-seq data.

```{r, message=FALSE}
library("DESeq2")
```

[DESeq2](https://bioconductor.org/packages/DESeq2) requires count data like that in the `SummarizedExperiment` we have been working with.

The [airway](https://bioconductor.org/packages/airway) experimental data package contains an example dataset from an RNA-Seq experiment of read counts per gene for airway smooth muscles. These data are stored in a `RangedSummarizedExperiment` object which contains 8 different experimental samples and assays 64,102 gene transcripts.

```{r, message=FALSE}
library(airway)
data(airway)
se <- airway

rowRanges(se)
colData(se)
```

The package requires count data like that in the `SummarizedExperiment` we have been working with, in addition to a `formula` describing the experimental design. We use the cell line as a covariate, and dexamethazone treatment as the main factor that we are interested in.

```{r}
dds <- DESeqDataSet(se, design = ~ cell + dex)
dds
```

The `dds` object can be manipulated very much like a `SummarizedExperiment` (in fact: it *is* a `SummarizedExperiment`).

There are two reasons which make pre-filtering useful: by removing genes with only few reads across samples, we reduce the size of the `dds` data object, and thus increase the speed of the transformation and testing functions within DESeq2.

Here we perform a minimal pre-filtering to keep only rows that have at least 10 reads total.

```{r}
keep <- rowSums(counts(dds)) >= 4
table(keep)
dds <- dds[keep,]
```

The DESeq workflow is summarized by a single function call, which performs statistical analysis on the data in the `dds` object.

```{r}
dds <- DESeq(dds)
```

A table summarizing measures of differential expression can be extracted from the object, and visualized or manipulated using commands we learned earlier.

```{r}
res <- results(dds)
res
```

**Task**:

Use the `contrast` argument of the `results` function to compare `trt` vs. `untrt` groups instead of `untrt` vs. `trt` (changes the direction of the fold change).

## Volcano plot

A useful illustration of differential expression results is to plot the fold change against the *p*-value in a volcano plot. This allows to inspect direction and magnitude (fold change) as well as the statistical significance (*p*-value) of the expression change.

```{r, message = FALSE}
library(ggplot2)
ggplot(as.data.frame(res), 
       aes(x = log2FoldChange, y = -log10(padj))) + geom_point()
```

## MA plot

Another useful illustration of differential expression results is to plot the fold changes as a function of the mean of the expression level (normalized counts) across samples in an MA plot.

Points will be colored if the adjusted *p*-value is less than a defined significance threshold (default: 0.1). Points which fall out of the window are plotted as open triangles pointing either up or down.

```{r}
plotMA(res)
```

The [DESeq2](https://bioconductor.org/packages/DESeq2) vignette also describes several other useful result exploration and data quality assessment plots.

**Exercises**

::: {.callout-note appearance="simple" icon="false"}
## Basic
1. Use the `coef` function to examine the actual coefficients of the model.

2. Get the number of genes considered significantly expressed at the alpha level of 0.1 (for the adjusted p value). 

3. Now see how many genes would be considered differentially expressed at an alpha level of 0.05 and a log2 fold change cutoff of at least 1. **Note**: Take a look again at the arguments of the `results` function. Are there any you should change?
:::


::: {.callout-caution appearance="simple" icon="false"}
## Advanced

Let's imagine that, instead of all being untreated, half of the samples had been treated with albuterol: 

```{r}
fake_se <- se
#Currently the factor only has the untrt level, so we need to add another
levels(colData(fake_se)$albut) <- c(levels(colData(fake_se)$albut), "trt")
colData(fake_se)$albut[c(1,3,4,8)] <- "trt"
```

Remake the `dds` object such that the `albut` column is an additional covartiate in the experimental design. 

If there is time, compare the number of significant results (for comparing `cell` and `dex`) when `albut` is and is not accounted for. Does it make a difference? 
:::

::: {.callout-important appearance="simple" icon="false"}
## Bonus

Try installing the [Glimma](http://bioconductor.org/packages/release/bioc/html/Glimma.html) package from bioconductor. Use it to create an interactive multidimensional scaling (MDS) plot of your results. 

:::

